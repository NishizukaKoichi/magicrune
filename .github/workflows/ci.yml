name: magicrune-ci
on:
  push:
  pull_request:

permissions:
  contents: read
  id-token: write

jobs:
  msrv-check:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust 1.82 (MSRV)
        run: |
          rustup toolchain install 1.82.0 --profile minimal
          rustup default 1.82.0
          rustup override set 1.82.0
      - name: Install rustfmt/clippy components
        run: rustup component add rustfmt clippy
      - name: Pre-fetch (locked)
        run: cargo fetch --locked --quiet
      - name: Format & Clippy gates
        run: |
          cargo fmt --all -- --check
          cargo clippy --all-targets --all-features -- -D warnings
      - name: Install latest cargo-audit
        run: cargo install cargo-audit --locked --force
      - name: Security audit (locked)
        run: cargo audit
      - uses: Swatinem/rust-cache@v2
      - name: Test (Wasm fallback)
        run: |
          export MAGICRUNE_FORCE_WASM=1
          cargo test --workspace --locked
      - name: Build (host)
        run: cargo build --release --workspace --locked

  cross-build:
    runs-on: ubuntu-24.04
    needs: msrv-check
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust nightly (for cross & edition2024)
        run: |
          rustup toolchain install nightly --profile minimal
          rustup default nightly
          rustup override set nightly
          rustup component add rustfmt clippy --toolchain nightly
      - name: Cache cargo and target (nightly)
        uses: actions/cache@v4
        with:
          path: |
            target
            ~/.cargo/registry
            ~/.cargo/git
          key: rust-${{ runner.os }}-nightly-${{ hashFiles('**/Cargo.lock') }}
      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross --rev e281947c
      - name: Build musl (x86_64)
        run: cross build --release --target x86_64-unknown-linux-musl
      - name: Build musl (aarch64)
        run: cross build --release --target aarch64-unknown-linux-musl

      - name: Generate checksums
        run: |
          mkdir -p dist
          sha256sum target/x86_64-unknown-linux-musl/release/magicrune > dist/checksums.txt
          sha256sum target/aarch64-unknown-linux-musl/release/magicrune >> dist/checksums.txt
      - name: Generate SBOM (Syft)
        uses: anchore/sbom-action@v0
        with:
          output-file: sbom.spdx.json
      - name: Install cosign
        uses: sigstore/cosign-installer@v3
      - name: Sign SBOM (OIDC keyless, emit bundle)
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign version || true
          cosign sign-blob --yes \
            --bundle sbom.spdx.json.bundle \
            --output-signature sbom.spdx.json.sig \
            sbom.spdx.json
      - name: Verify SBOM signature (keyless with identity)
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign verify-blob \
            --bundle sbom.spdx.json.bundle \
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/.+" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            sbom.spdx.json
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: magicrune-${{ github.sha }}
          path: |
            target/x86_64-unknown-linux-musl/release/magicrune
            target/aarch64-unknown-linux-musl/release/magicrune
            sbom.spdx.json
            sbom.spdx.json.sig
            dist/checksums.txt

  coverage:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: 1.82.0
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libseccomp-dev
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin --locked --version 0.27.3
      - name: Run coverage (fail < 80%)
        env:
          RUST_LOG: warn
        run: |
          cargo tarpaulin --workspace --all-features \
            --engine llvm --timeout 180 \
            --fail-under 80
